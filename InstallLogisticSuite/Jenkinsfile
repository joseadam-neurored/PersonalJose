#!groovy
import groovy.json.JsonSlurperClassic

node ('agent'){
    def ORG_LIST = params.ORG_LIST.split('\n')
    def SF_CONSUMER_KEY = env.LS_SF_CONSUMER_KEY
    def SF_USERNAME = "usuario@correo.com"
    def INSTALLATION_KEY = params.INSTALLATION_KEY
    def PACKAGE_NAME = "LogisticSuite"
    def PACKAGE_VERSION_ID

    stage("Checking Source") {
        checkout scm
    }

    withEnv(["HOME=${env.WORKSPACE}"]) {
        ORG_LIST.each { org -> 
            stage("Authorizing DevHub Access in ${org}") {
                def rc = sh(script: "sf org login jwt --client-id ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --alias ${org} --jwt-key-file /tmp/server.key", returnStatus: true)
                println(rc)
                if (rc != 0) {
                    error "Failed to Authorize DevHub in ${org}"
                }
            }
            stage("List last version of package in ${org}") {
                // Ejecutar el comando y capturar la salida
                def command = "sf package version list -v ${org} -p ${PACKAGE_NAME}"
                def output = sh(script: command, returnStdout: true).trim()

                // Mostrar la salida completa para depuración
                println("Output of the command:\n${output}")

                // Filtrar la última línea y extraer el ID del paquete
                PACKAGE_VERSION_ID = output.tokenize('\n').last().split().find { it.startsWith("04t") }

                // Mostrar el ID del paquete
                println("PACKAGE_VERSION_ID: ${PACKAGE_VERSION_ID}")
            }
            stage("Install package in ${org}") {
                def rc = sh(script: "sf package install --package ${PACKAGE_VERSION_ID} --target-org ${org} --installation-key ${INSTALLATION_KEY} --wait 10 --json", returnStdout: true).trim()
                println(rc)          
            }
            stage("Running Tests in ${org}") {
                def rc = sh(script: "sf apex run test -l RunLocalTests -w 10 --target-org ${org} --json -c", returnStdout: true).trim()
                echo rc
                
                // Parse the JSON response
                def jsonSlurper = new JsonSlurperClassic()
                def response = jsonSlurper.parseText(rc)
                def status = response["status"]
                if (status != 0) {
                    TEST_COVERAGE_ERROR = "Error running tests in ${org}"
                } else {
                    TEST_COVERAGE_VALUE = response["result"]["coverage"]["summary"]["testRunCoverage"]
                }
            }
        }
    }
}
