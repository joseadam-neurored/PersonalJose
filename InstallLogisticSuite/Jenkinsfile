#!groovy
import groovy.json.JsonSlurperClassic

node ('agent'){
    def ORG_LIST = params.ORG_LIST.split('\n')
    def SF_CONSUMER_KEY = env.LS_SF_CONSUMER_KEY
    def SF_USERNAME = "ususario@correo.com"
    def INSTALLATION_KEY = params.INSTALLATION_KEY
    def PACKAGE_NAME = "ProyectoPrueba"


    stage("Checking Source") {
        checkout scm
    }

    withEnv(["HOME=${env.WORKSPACE}"]) {
        ORG_LIST.each { org -> 
            stage("Authorizing DevHub Access for ${org}") {
                def rc = sh(script: "sf org login jwt --client-id ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --alias ${org} --jwt-key-file /tmp/server.key", returnStatus: true)
                println(rc)
                if (rc != 0) {
                    error "Failed to Authorize DevHub for ${org}"
                }
            }
            stage("Create package new version for ${org}") {
                def rc = sh(script: "cd ${PACKAGE_NAME} && sf package version create --package \"${PACKAGE_NAME}\" -v ${org} --installation-key ${INSTALLATION_KEY} --wait 10 --json --skip-validation", returnStdout: true).trim()
                echo rc
                def jsonSlurper = new JsonSlurperClassic()
                def response = jsonSlurper.parseText(rc)
                def status = response["status"]
                if (status != 0) {
                    error "Error Creation new version for ${org}"
                }else {
                    PACKAGE_VERSION = response["result"]["SubscriberPackageVersionId"]
                }
            }
            stage("Install package in ${org}") {
                def rc = sh(script: "sf package install --package ${PACKAGE_VERSION} --target-org ${org} --installation-key ${INSTALLATION_KEY} --wait 10 --json", returnStdout: true).trim()
                println(rc)          
            }
            stage("Running Tests in ${org}") {
                def rc = sh(script: "sf apex run test -l RunLocalTests -w 10 --target-org ${org} --json -c", returnStdout: true).trim()
                echo rc
                
                // Parse the JSON response
                def jsonSlurper = new JsonSlurperClassic()
                def response = jsonSlurper.parseText(rc)
                def status = response["status"]
                if (status != 0) {
                    TEST_COVERAGE_ERROR = "Error running tests in ${org}"
                } else {
                    TEST_COVERAGE_VALUE = response["result"]["coverage"]["summary"]["testRunCoverage"]
                }
            }
        }
    }
}
