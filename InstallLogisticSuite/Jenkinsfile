#!groovy
import groovy.json.JsonSlurperClassic

node ('agent'){
    def ORG_LIST = params.ORG_LIST.split('\n')
    def SF_CONSUMER_KEY = "3MVG9k02hQhyUgQDJCnSUUKcwU_kRQ4HwnwVKlslkIOs8dKY4kt7kQQXM2aX7ZoR3tvlZD13z_FGojLGUBU1O"
    def SF_USERNAME = "jose03adam@gmail.com"
    def INSTALLATION_KEY = params.INSTALLATION_KEY
    def PACKAGE_NAME = "ProyectoPrueba"
    def PACKAGE_VERSION_ID

    stage("Checking Source") {
        checkout scm
    }

    withEnv(["HOME=${env.WORKSPACE}"]) {
        ORG_LIST.each { org -> 
            stage("Authorizing DevHub Access in ${org}") {
                                sh '''
                    echo "
-----BEGIN PRIVATE KEY-----
MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC7U9hqr4RZlOAC
GH0DRNETw6rmL40dN1kXR4jf74oIeD/BPMVw9vqnkEBP4jtU9RCdocMqVSwSRg6o
zRRiJpRQncgVoA8tGNLnNOWb5Z4e1PyBms2UILp9cymRownLyD856nD/PnpQgf5p
C9n5X51DwvQa56Iy+wip/HfFJAfhRZLZXJbosbmhaFtkYfDMweVSkphAmvQgUqYL
tA8Y7BEdHB921ghMmpOqppdHq4nLOCK9fUsOv1z5swGF6Ss15uhc2Yip6tdZUydP
8d8kDMv5MoxWy21liY6UnyWQHeTV/F/r0pZUSezIh4NzdT7SHw+SFLWxutVYJL67
ZcnNHu9HAgMBAAECggEADrRMgZtYv+YQFg9cCMdRw25m2ii+DUlh7zzd6/i+lLRJ
CjRoqdmz3+FShbK+xjLHuh06LPbV6HKisJy1zo/esTFMGmkfp9eR/oodbTj/Shud
MoM3QzsKcycjX9uKEk/xU+zThTBJ+PXV8DhOROU80AExQ3IOk6023I5adxlr8O0b
Fy0XMW4S/AxT8b08k2naXaKMwbTr9uIPF7l8R8cOuPRHuiTtkB7iTg1TJMcLUBkL
z5iwujMPoS+LciHZX+HZwkjf3wH/GqS4iWZiM7N/4P7c+Cx3wfEkfnn7Z8Z8C+sZ
6M8ZWXnreeVP91NAmAJBQPN0EkAaQPstFXABdFvFSQKBgQDjGzPzNaesFn61MKOC
oIgaEgga09igMFqxf/lIQg5xJTtpsOm5CDJ1WBeRDBgROhSOgUBdcgf99EYDkfw9
0ODGKVaNsKqcjdC/mLD1xTkJpkuH7fzOPUf/4AGMVlyhqyAz6nXSxOX0+UwBIUfj
dERIFfUop7uxapROvzWpXIhK4wKBgQDTKQ7tMNP9NtA8rv/BEB8IPOVWrfLdGGRX
YwtG95wguPGDRnZ3uPa4LYUYV28sG0f6L3C/wJb3kTPl/97iqLlqiLVZkDTtg3om
6vH5LKWy8Fmwzg3XYt2pEOL5h7CmdW58MgOYr2RAmyg9qljjLL7djZJWbhh2IhOT
3gKhtQ1DTQKBgAhpCnx4QTRbROf63CNLRJ8KiehMbhpIkCNApP+rCpPgGBoq5gzn
I886quzBMOb6aqZ4XOTZAzjBYhJhxqCXaquL/luS7k6L5e4ifnMrkZgs42EuTA1r
MY5lQklrLVUDXFbv2NssVYPD86+bBumCdcDhp0mRJJ9GXiWoaRlThuyXAoGAHYu3
LPUSFHIg/Py3iHoK/YoXxOMeAlWxZJDVOR7YV7PJB0dKuEHHM8oav2cshQ1kKtuM
eSgnd4h3rIz60Ngu6XsrdNa6sSkeZGenZ+gZX0pGInkScrrArTFRsPyNeR0hUntl
CW4xJuEO5mH5gf/2zOVMPo+1GIJ4Hs6Hq7y7mFkCgYAlB+eXUC3ZZipcb1LgTVsT
HHTq8+u+l5oaET8Oz/S8Ga1YRDao+VmdMC385zX4uubfEAS7ncrO6QgcSEn6Yx1y
JZsQw4R2mdFifLbjNNMSC0TRLcFQGw0aYaRHQCnI7LWMr2rm/lIuPAgjBn5LyTxh
JbmHp76mj2srOJf7Pu34Lg==
-----END PRIVATE KEY-----" > /tmp/server.key 
                '''
                def rc = sh(script: "sf org login jwt --client-id ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --alias ${org} --jwt-key-file /tmp/server.key", returnStatus: true)
                println(rc)
                if (rc != 0) {
                    error "Failed to Authorize DevHub in ${org}"
                }
            }
            stage("List last version of package in ${org}") {
                // Ejecutar el comando y capturar la salida
                def command = "cd ${PACKAGE_NAME} && sf package version list -v ${org} -p ${PACKAGE_NAME}"
                def output = sh(script: command, returnStdout: true).trim()

                // Mostrar la salida completa para depuración
                println("Output of the command:\n${output}")

                // Filtrar la última línea y extraer el ID del paquete
                def packageVersionId = output.tokenize('\n').last().split().find { it.startsWith("04t") }

                // Mostrar el ID del paquete
                println("PACKAGE_VERSION_ID: ${packageVersionId}")
            }
            stage("Install package in ${org}") {
                def rc = sh(script: "sf package install --package ${PACKAGE_VERSION_ID} --target-org ${org} --installation-key ${INSTALLATION_KEY} --wait 10 --json", returnStdout: true).trim()
                println(rc)          
            }
            stage("Running Tests in ${org}") {
                def rc = sh(script: "sf apex run test -l RunLocalTests -w 10 --target-org ${org} --json -c", returnStdout: true).trim()
                echo rc
                
                // Parse the JSON response
                def jsonSlurper = new JsonSlurperClassic()
                def response = jsonSlurper.parseText(rc)
                def status = response["status"]
                if (status != 0) {
                    TEST_COVERAGE_ERROR = "Error running tests in ${org}"
                } else {
                    TEST_COVERAGE_VALUE = response["result"]["coverage"]["summary"]["testRunCoverage"]
                }
            }
        }
    }
}
