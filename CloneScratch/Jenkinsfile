#!groovy
import groovy.json.JsonSlurperClassic

node ('agent'){
    def SF_CONSUMER_KEY=env.LS_SF_CONSUMER_KEY
    def SF_USERNAME= "ususario@correo.com"
    def ORG_ALIAS = params.ORG_ALIAS
    def SNAPSHOT_ID

    def SNAPSHOT_NAME = params.SNAPSHOT_NAME
    def SOURCE_SCRATCH_ID = params.SOURCE_SCRATCH_ID

    def NEW_SCRATCH_NAME = params.NEW_SCRATCH_NAME
    
        withEnv(["HOME=${env.WORKSPACE}"]) {
            stage("Authorizing DevHub Access") {
                def rc = sh(script: "sf org login jwt --client-id ${SF_CONSUMER_KEY} --username ${SF_USERNAME} --alias ${ORG_ALIAS} --jwt-key-file /tmp/server.key", returnStatus: true)
                println(rc)
                if (rc != 0) {
                    error "Failed to Authorize DevHub"
                }
            }
            stage("Creating Snapshot from Scratch Org") {
                def rc = sh(script: "sf org create snapshot --name ${SNAPSHOT_NAME} --source-org ${SOURCE_SCRATCH_ID} --target-dev-hub ${ORG_ALIAS}", returnStdout: true).trim()
                
                env.SNAPSHOT_ID = sh(script: "echo '${rc}' | awk '/^ Id/ {print \$2}'", returnStdout: true).trim()

                println("Snapshot ID: ${env.SNAPSHOT_ID}")
                
                if (env.SNAPSHOT_ID == " ") {
                    error "Failed to Create Snapshot"
                } 

            }
            stage('Check if Snapshot is Ready') {
                    def snapshotReady = false
                    while (!snapshotReady) {
                        // Ejecutar el comando para obtener el estado del snapshot
                        def rc = sh(script: "sf org get snapshot --snapshot ${env.SNAPSHOT_ID} --target-dev-hub ${ORG_ALIAS}", returnStdout: true).trim()
                        echo "Snapshot Command Output:\n${rc}"

                        // Extraer el estado usando awk
                        def status = sh(script: "echo '${rc}' | awk '/^ Status/ {print \$2}'", returnStdout: true).trim()
                        echo "Current Status: ${status}"

                        // Comprobar si el estado es 'Active'
                        if (status == 'Active') {
                            echo "Snapshot is Active"
                            snapshotReady = true
                        } else {
                            echo "Snapshot is not Active yet. Waiting 120 seconds..."
                            sleep(time: 120, unit: 'SECONDS')
                        }
                    }
        }
            stage("Creating new Scratch Org") {
                sh """
                    echo "{
                    \\"orgName\\": \\"${NEW_SCRATCH_NAME}\\",
                    \\"snapshot\\": \\"${SNAPSHOT_NAME}\\"
                    }" > scratchSnapshot.json
                """

                def rc = sh(script: "sf org create scratch --definition-file scratchSnapshot.json --wait 10 --target-dev-hub ${ORG_ALIAS}", returnStdout: true).trim()
                println(rc)
                
            }
            stage("Deleting Snapshot") {
                def rc = sh(script: "echo yes | sf org delete snapshot --snapshot ${SNAPSHOT_NAME} --target-dev-hub ${ORG_ALIAS}", returnStdout: true).trim()
                println(rc)
                
            }
    }
}
